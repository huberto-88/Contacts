type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public abstract class Contact {
        protected String name;
        protected String phoneNumber;
        protected LocalDateTime timeCreated;
        protected LocalDateTime timeLastEdit;


        public Contact(String name, String phoneNumber) {
            this.name = name;
            this.phoneNumber = phoneNumber;
            this.timeCreated = LocalDateTime.now();
            this.timeLastEdit = LocalDateTime.now();
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public void setPhoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
        }
    }
  learner_created: true
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class PhoneBook {
        private final List<Contact> contactList = new ArrayList<>();
        private final Scanner scanner = new Scanner(System.in);

        public void addNewPerson(String name, String surname, String birthDate, String gender, String phoneNumber) {
            if (!isPhoneNumberValid(phoneNumber)) {
                System.out.println("Wrong number format!");
                phoneNumber = "[no number]";
            }
            contactList.add(
                    new Person.ContactCreator()
                            .setName(name)
                            .setSurname(surname)
                            .setBirthDay(birthDate)
                            .setGender(gender)
                            .setPhoneNumber(phoneNumber)
                            .createNewContact()
            );
        }

        public void addNewOrganization(String name, String address, String phoneNumber) {
            if (!isPhoneNumberValid(phoneNumber)) {
                System.out.println("Wrong number format!");
                phoneNumber = "[no number]";
            }
            contactList.add(
                    new Organization.ContactCreator()
                            .setName(name)
                            .setAddress(address)
                            .setPhoneNumber(phoneNumber)
                            .createNewContact()
                    );
        }

        public int getNumberOfRecords() {
            return contactList.size();
        }

        public void printListOfRecords() {
            for (int i = 0; i < contactList.size(); i++) {
                System.out.printf("%d. %s\n",
                        i + 1,
                        contactList.get(i).getName()
                );
            }
        }

        public void showInfo(int index) {
            System.out.println(contactList.get(index - 1));
        }

        public void editRecord(int record) {
            if (record > contactList.size()) {
                System.out.println("There is no record with that id");
            } else {
                if (contactList.get(record - 1) instanceof Person) {
                    editPerson((Person) contactList.get(record - 1));
                } else if (contactList.get(record - 1) instanceof Organization) {
                    editOrganization((Organization) contactList.get(record - 1));
                }

            }
        }

        private boolean isPhoneNumberValid(String number) {
            String regex = "[+]?(\\w+)?(\\s|[-])?([(]\\w{2,}[)])?((\\s|[-])\\w{2,})*";
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(number);
            return matcher.matches();
        }

        public void removeRecord(int recordToRemove) {
            contactList.remove(recordToRemove);
        }


        private void editPerson(Person person) {
                System.out.println("Select a field (name, surname, birth, gender, number):");
                String fieldToEdit = scanner.nextLine();
                System.out.printf("Enter %s\n", fieldToEdit);
                String newValue = scanner.nextLine();

            switch (fieldToEdit) {
                case "name":
                    person.setName(newValue);
                    break;
                case "surname":
                    person.setSurname(newValue);
                    break;
                case "birth":
                    person.setBirthDay(newValue);
                    break;
                case "gender":
                    person.setGender(newValue);
                    break;
                case "number":
                    if (!isPhoneNumberValid(newValue)) {
                        System.out.println("Wrong number format!");
                        newValue = "[no number]";
                    }
                    person.setPhoneNumber(newValue);
                    break;
            }
        }

        private void editOrganization(Organization organization) {
            System.out.println("Select a field (name, address, number):");
            String fieldToEdit = scanner.nextLine();
            System.out.printf("Enter %s\n", fieldToEdit);
            String newValue = scanner.nextLine();

            switch (fieldToEdit) {
                case "name":
                    organization.setName(newValue);
                    break;
                case "address":
                    organization.setAddress(newValue);
                    break;
                case "number":
                    organization.setPhoneNumber(newValue);
                    break;
            }
        }
    }
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  text: |
    package contacts;

    public class Organization extends Contact {
        private String address;

        private Organization(String name, String address, String phoneNumber) {
            super(name, phoneNumber);
            this.address = address;
        }

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        @Override
        public String toString() {
            return "Organization name: " + name + "\n" +
                    "Address: " + address + "\n" +
                    "Number: " + phoneNumber + "\n" +
                    "Time created: " + timeCreated + "\n" +
                    "Time last edit: " + timeLastEdit + "\n";
        }

        static class ContactCreator {
            private String name;
            private String address;
            private String phoneNumber;

            ContactCreator setName(String name) {
                this.name = name;
                return this;
            }

            ContactCreator setAddress(String address) {
                this.address = address;
                return this;
            }

            ContactCreator setPhoneNumber(String phoneNumber) {
                this.phoneNumber = phoneNumber;
                return this;
            }

            Organization createNewContact() {
                return new Organization(name, address, phoneNumber);
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;

    public class Person extends Contact {
        private String surname;
        private String gender;
        private String birthDay;

        private Person(String name, String surname, String gender, String birthDay, String phoneNumber) {
            super(name, phoneNumber);
            this.name = name;
            this.surname = surname;
            this.gender = gender;
            this.birthDay = birthDay;
        }

        public String getGender() {
            return gender;
        }

        public void setGender(String gender) {
            this.gender = gender;
        }

        public String getBirthDay() {
            return birthDay;
        }

        public void setBirthDay(String birthDay) {
            this.birthDay = birthDay;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public String getSurname() {
            return surname;
        }

        @Override
        public String toString() {
            return "Name: " + name + "\n" +
                    "Surname: " + surname + "\n" +
                    "Birth date: " + birthDay + "\n" +
                    "Gender: " + gender + "\n" +
                    "Number: " + phoneNumber + "\n" +
                    "Time created: " + timeCreated + "\n" +
                    "Time last edit: " + timeLastEdit + "\n";
        }

        static class ContactCreator {
            private String name;
            private String surname;
            private String gender;
            private String birthDay;
            private String phoneNumber;

            ContactCreator setName(String name) {
                this.name = name;
                return this;
            }

            ContactCreator setSurname(String surname) {
                this.surname = surname;
                return this;
            }

            ContactCreator setGender(String gender) {
                this.gender = gender;
                return this;
            }

            ContactCreator setBirthDay(String birthDay) {
                this.birthDay = birthDay;
                return this;
            }

            ContactCreator setPhoneNumber(String phoneNumber) {
                this.phoneNumber = phoneNumber;
                return this;
            }

            Person createNewContact() {
                return new Person(name, surname, gender, birthDay, phoneNumber);
            }
        }

    }
  learner_created: true
- name: src/contacts/ContactApp.java
  visible: true
  text: |-
    package contacts;

    import java.time.LocalDate;
    import java.time.format.DateTimeParseException;
    import java.util.Scanner;

    public class ContactApp {
        private final Scanner scanner = new Scanner(System.in);
        private final PhoneBook phoneBook;

        public ContactApp() {
            this.phoneBook = new PhoneBook();
        }


        public void run() {
            while (true) {
                displayMenu();
            }
        }


        private void displayMenu() {
            System.out.print("Enter action (add, remove, edit, count, info, exit): ");
            String option = scanner.nextLine().trim();

            switch (option) {
                case "add":
                    System.out.println("Enter the type (person, organization:");
                    String type = scanner.nextLine().trim();
                    if (type.equals("person")) {
                        addPerson();
                    } else if (type.equals("organization")) {
                        addOrganization();
                    }
                    break;
                case "remove":
                    remove();

                    break;
                case "edit":
                    edit();

                    break;
                case "count":
                    count();
                    break;
                case "info":
                    info();
                    break;
                case "exit":
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("There is no option " + option);
                    System.out.println("Choose another one");
            }
        }

        private void count() {
            System.out.printf("The Phone Book has %d records.\n", phoneBook.getNumberOfRecords());
        }

        private void info() {
            phoneBook.printListOfRecords();
            System.out.print("Enter index to show info: ");
            int index = Integer.parseInt(scanner.nextLine().trim());
            phoneBook.showInfo(index);
        }

        private void addPerson() {
            System.out.println("Enter the name:");
            String name = scanner.nextLine();

            System.out.println("Enter the surname:");
            String surname = scanner.nextLine();

            System.out.println("Enter the birth date: ");
            String birthDate = scanner.nextLine();
            if (!checkBirthDate(birthDate)) {
                birthDate = "[no data]";
            }

            System.out.println("Enter the gender (M, F):");
            String gender = scanner.nextLine().trim();
            if (!gender.matches("[FM]")) {
                System.out.println("Bad gender!");
                gender = "[no data]";
            }

            System.out.println("Enter the number");
            String number = scanner.nextLine();

            phoneBook.addNewPerson(name, surname, birthDate, gender, number);
            System.out.println("The record added.\n");
        }


        private void addOrganization() {
            System.out.println("Enter the name:");
            String name = scanner.nextLine();
            System.out.println("Enter the address:");
            String address = scanner.nextLine();
            System.out.println("Enter the number");
            String number = scanner.nextLine();

            phoneBook.addNewOrganization(name, address, number);
            System.out.println("The record added.\n");
        }

        private void remove() {
            if (phoneBook.getNumberOfRecords() < 1) {
                System.out.println("No records to remove!");
            } else {
               // list();
                System.out.println("Select a record:");
                int recordToRemove = Integer.parseInt(scanner.nextLine().trim()) - 1;
                phoneBook.removeRecord(recordToRemove);
                System.out.println("The record removed!");
            }
        }

        private void edit() {
            if (phoneBook.getNumberOfRecords() < 1) {
                System.out.println("No records to edit!");
            } else {
                phoneBook.printListOfRecords();
                System.out.println("Select a record:");
                int record = Integer.parseInt(scanner.nextLine().trim());

                phoneBook.editRecord(record);
                System.out.println("The record updated!\n");
            }
        }

        private boolean checkBirthDate(String birthDate) {
            try {
                LocalDate test = LocalDate.parse(birthDate);
                return true;
            } catch (DateTimeParseException e) {
                System.out.println("Bad birth date!");
                return false;
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 16 Sep 2021 15:36:57 UTC
record: -1
